#!/usr/bin/env node
'use strict';

var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var program = require('commander');
var roole = require('../lib/roole');

program
	.version(roole.version, '-v, --version')
	.usage('[options] [file|dir ...]')
	.option('-p, --print', 'Output compiled CSS to stdout')
	.option('-o, --out <dir>', 'Write compiled files to <dir>')
	.option('-w, --watch', 'Watch files and re-compile if changed')
	.option('-f, --force', 'Create files even when compile to empty string')
	.option('    --prefix <names>', 'Comma-seperated vendor names to use for prefixing')
	.option('    --indent <str>', 'Indentation string to use in CSS')
	.option('    --precision <num>', 'Max number of decimal digits to use in CSS')
	.option('    --skip-prefixed', 'Not generate prefixed rule that already exists')
	.parse(process.argv);

var rooleOptions = {
	prettyError: true
};

if ('prefix' in program) {
	var prefixes = program.prefix.split(',');
	prefixes = prefixes.map(function(prefix) {
		return prefix.trim();
	});
	rooleOptions.prefix = prefixes;
}

if (program.indent != null) rooleOptions.indent = program.indent;
if (program.precision != null) rooleOptions.precision = program.precision;
if (program.skipPrefixed != null) rooleOptions.skipPrefixed = program.skipPrefixed;

if (!program.args.length) {
	compileStdin(function(content) {
		console.log(content);
	});
	return;
}

compileFiles(resolveFiles(program.args), function(files) {
	if (program.print) {
		var content = files
			.filter(function(file) { return file.compiledContent; })
			.map(function(file) { return file.compiledContent; })
			.join('\n\n');

		console.log(content);
		return;
	}

	writeFiles(files);

	if (program.watch)
		watchFiles(files);
});

function compileStdin(callback) {
	var stdin = '';
	process.stdin.resume();
	process.stdin.setEncoding('utf8');
	process.stdin.on('data', function(chunk){ stdin += chunk; });
	process.stdin.on('end', function(){
		roole.compile(stdin, rooleOptions, function(error, css) {
			if (error)
				throw error;

			callback(css);
		});
	});
}

function resolveFiles(filePaths, dirPath) {
	var files = [];
	filePaths.forEach(function(filePath) {
		var stat = fs.statSync(filePath);
		if (stat.isFile()) {
			var file = {
				path: filePath,
				content: fs.readFileSync(filePath, 'utf8')
			};

			if (!program.out) {
				file.outputPath = file.path;
			} else {
				if (!dirPath) {
					var base = path.basename(file.path);
					file.outputPath = path.join(program.out, base);
				} else {
					var subpath = path.relative(dirPath, file.path);
					file.outputPath = path.join(program.out, subpath);
				}
			}
			file.outputPath = file.outputPath.replace(/\.roo$|$/, '.css');

			files.push(file);
		} else if (stat.isDirectory()) {
			var dir = filePath;
			var filePaths = fs.readdirSync(dir);
			filePaths = filePaths.map(function(filePath) {
				return path.join(dir, filePath);
			}).filter(function(filePath) {
				var stat = fs.statSync(filePath);
				if (stat.isFile()) {
					var hasExt = /\.roo$/.test(filePath);
					return hasExt;
				}

				return stat.isDirectory();
			});
			files = files.concat(resolveFiles(filePaths, dirPath || filePath));
		}
	});
	return files;
}

function compileFiles(files, callback) {
	var i = 0;
	var length = files.length;

	files.forEach(function(file) {
		compileFile(file, function() {
			if (++i === length)
				callback(files);
		});
	});
}

function compileFile(file, callback) {
	rooleOptions.filePath = file.path;
	roole.compile(file.content, rooleOptions, function(error, css) {
		if (error)
			throw error;

		file.compiledContent = css;

		callback(file);
	});
}

function writeFiles(files) {
	files.forEach(function(file) {
		writeFile(file);
	});
}

function writeFile(file, watching) {
	var dir = path.dirname(file.outputPath);
	if (!fs.existsSync(dir))
		mkdirp.sync(dir);
	fs.writeFileSync(file.outputPath, file.compiledContent);

	if (!program.force && !file.compiledContent) {
		if (!program.watch)
			console.log('INFO:', file.path, 'compiles to empty string, not writing to file');
		else if (watching)
			console.log('  compiled', file.path, 'to empty string, not writing to file');
	} else {
		if (program.watch && watching)
			console.log('  compiled', file.path, 'to', file.outputPath);
	}
}

function watchFiles(files) {
	program.args.forEach(function(filePath) {
		var stat = fs.statSync(filePath);
		if (stat.isDirectory() && filePath.slice(-1) !== '/')
			filePath += '/';

		console.log('  watching', filePath);
	});

	files.forEach(function(file) {
		watchFile(file);
	});
}

function watchFile(file) {
	fs.watchFile(file.path, {interval: 100}, function(curr, prev) {
		if (curr.mtime <= prev.mtime)
			return;

		compileFile(file, function() {
			writeFile(file, true);
		});
	});
}