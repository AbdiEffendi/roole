#!/usr/bin/env node
'use strict';

var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var program = require('commander');
var roole = require('../lib/roole');

program
	.version(roole.version, '-v, --version')
	.usage('[options] [file|dir ...]')
	.option('-p, --print', 'Output compiled CSS to stdout')
	.option('-o, --out <dir>', 'Write compiled files to <dir>')
	.option('-w, --watch', 'Watch files and re-compile if changed')
	.option('-f, --force', 'Create files even when compile to empty string')
	.option('    --prefix <names>', 'Space-separated vendor names to use for prefixing')
	.option('    --indent <str>', 'Indentation string to use in CSS')
	.option('    --precision <num>', 'Max number of decimal digits to use in CSS')
	.option('    --skip-prefixed', 'Not generate prefixed rule that already exists')
	.parse(process.argv);

var options = {
	prettyError: true
};

if (program.prefix != null) { options.prefix = program.prefix; }
if (program.indent != null) { options.indent = program.indent; }
if (program.precision != null) { options.precision = program.precision; }
if (program.skipPrefixed != null) { options.skipPrefixed = program.skipPrefixed; }

if (!program.args.length) {
	compileStdin(function(content) {
		console.log(content);
	});
} else {
	compileFiles(resolveFiles(program.args), function(files) {
		if (program.print) {
			var content = files
				.filter(function(file) { return file.compiledContent; })
				.map(function(file) { return file.compiledContent; })
				.join('\n\n');

			console.log(content);
			return;
		}

		writeFiles(files);
		if (program.watch) { watchFiles(files); }
	});
}

function compileStdin(callback) {
	var stdin = '';
	process.stdin.resume();
	process.stdin.setEncoding('utf8');
	process.stdin.on('data', function(chunk) { stdin += chunk; });
	process.stdin.on('end', function(){
		roole.compile(stdin, options, function(error, css) {
			if (error) {
				throw error;
			}

			callback(css);
		});
	});
}

function resolveFiles(filenames, dirname) {
	var files = [];
	filenames.forEach(function(filename) {
		var stat = fs.statSync(filename);
		if (stat.isFile()) {
			var file = {
				name: filename,
				content: fs.readFileSync(filename, 'utf8')
			};

			if (!program.out) {
				file.outputName = file.name;
			} else {
				if (!dirname) {
					var base = path.basename(file.name);
					file.outputName = path.join(program.out, base);
				} else {
					var relpath = path.relative(dirname, file.name);
					file.outputName = path.join(program.out, relpath);
				}
			}
			file.outputName = file.outputName.replace(/\.roo$|$/, '.css');

			files.push(file);
		} else if (stat.isDirectory()) {
			var dir = filename;
			var filenames = fs.readdirSync(dir);
			filenames = filenames.map(function(filename) {
				return path.join(dir, filename);
			}).filter(function(filename) {
				var stat = fs.statSync(filename);
				if (stat.isFile()) {
					var hasExt = /\.roo$/.test(filename);
					return hasExt;
				}

				return stat.isDirectory();
			});
			files = files.concat(resolveFiles(filenames, dirname || filename));
		}
	});
	return files;
}

function compileFiles(files, callback) {
	var i = 0;
	var length = files.length;

	files.forEach(function(file) {
		compileFile(file, function() {
			if (++i === length) {
				callback(files);
			}
		});
	});
}

function compileFile(file, callback) {
	options.filename = file.name;
	roole.compile(file.content, options, function(error, css) {
		if (error) {
			throw error;
		}

		file.compiledContent = css;

		callback(file);
	});
}

function writeFiles(files) {
	files.forEach(function(file) {
		writeFile(file);
	});
}

function writeFile(file, watching) {
	if (!file.compiledContent && !program.force) {
		if (!program.watch) {
			console.log('INFO:', file.name, 'compiles to empty string, not writing to file');
		} else if (watching) {
			console.log('  compiled', file.name, 'to empty string, not writing to file');
		}
	} else {
		var dir = path.dirname(file.outputName);
		mkdirp.sync(dir);
		fs.writeFileSync(file.outputName, file.compiledContent);

		if (program.watch && watching) {
			console.log('  compiled', file.name, 'to', file.outputName);
		}
	}
}

function watchFiles(files) {
	program.args.forEach(function(filename) {
		var stat = fs.statSync(filename);
		if (stat.isDirectory() && filename.slice(-1) !== '/') {
			filename += '/';
		}

		console.log('  watching', filename);
	});

	files.forEach(function(file) {
		watchFile(file);
	});
}

function watchFile(file) {
	fs.watchFile(file.name, {interval: 100}, function(curr, prev) {
		if (curr.mtime <= prev.mtime) {
			return;
		}

		file.content = fs.readFileSync(file.name, 'utf8');

		compileFile(file, function() {
			writeFile(file, true);
		});
	});
}