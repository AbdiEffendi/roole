#!/usr/bin/env node
'use strict'

var jsdom = require('jsdom')
var roole = require('../roole')

var args = process.argv.slice(2)
var content = ''
process.stdin.resume()
process.stdin.setEncoding('utf8')
process.stdin.on('data', function (chunk) {
	content += chunk
})
process.stdin.on('end', function () {
	jsdom.env({
		html: content,
		scripts: [
			'../components/codemirror/addon/runmode/runmode-standalone.js',
			'../components/codemirror/mode/xml/xml.js',
			'../components/codemirror/mode/javascript/javascript.js',
			'./css-mode.js',
			'./roole-mode.js',
			'./html-mode.js'
		],
		done: function(errors, window) {
			if (errors)
				throw errors[0]
			var json = parse([].slice.call(window.document.body.children, 0), window)
			console.log(JSON.stringify(json))
		}
	})
})

function parse(elements, window) {
	var CodeMirror = window.CodeMirror

	var json = {
		language_heading: [],
		top_heading: [],
		main: [],
		version: require('../roole/package.json').version
	}
	var underLanguage = false
	var imports = []

	elements.forEach(function(element) {
		var nodeName = element.nodeName
		var result = /H(\d)/.exec(nodeName)
		if (result) {
			var level = +result[1]
			var content = element.innerHTML
			var id = content.toLowerCase().replace(/ /g, '-')

			if (level === 2) {
				if (content === 'Language') {
					underLanguage = true
				} else {
					underLanguage = false
					json.top_heading.push({
						id: id,
						content: content
					})
				}
			} else if (underLanguage && level === 3) {
				json.language_heading.push({
					id: id,
					content: content
				})
			}

			json.main.push({
				heading: {
					level: level,
					id: level === 2 || underLanguage ? {value: id} : null,
					content: content
				}
			})
			return
		}

		switch (nodeName) {
		case 'PRE':
			var codeElement = element.children[0]
			var content = codeElement.textContent
			content = content.replace(/^ +/gm, function(spaces) {
				return spaces.replace(/    /g, '  ')
			})
			var lang = codeElement.className
			if (lang !== 'roole') {
				if (lang) {
					CodeMirror.runMode(content, lang === 'html' ? 'htmlmixed' : lang, codeElement)
					content = codeElement.innerHTML
				} else {
					codeElement.textContent = content
					content = codeElement.innerHTML
				}

				json.main.push({
					snippet: {
						lang: lang ? {value: lang} : null,
						content: {
							value: content
						}
					}
				})
				return
			}

			var result = /^\/\/\s*([\w-]+\.(?:roo|css))\s*([\s\S]+)/.exec(content)
			if (result) {
				imports.push({
					name: result[1],
					content: result[2]
				})
				return
			}

			var output = ''
			var importedFiles = {}
			imports.forEach(function(file) {
				importedFiles[file.name] = file.content
			})
			roole.compile(content, {
				imports: importedFiles,
				indent: '  ',
				prettyError: true
			}, function(error, css) {
				if (error)
					throw error

				output = css
			})

			CodeMirror.runMode(content, 'roole', codeElement)
			content = codeElement.innerHTML

			imports.forEach(function(file) {
				CodeMirror.runMode(file.content, 'roole', codeElement)
				file.content = codeElement.innerHTML
			})

			CodeMirror.runMode(output, 'css', codeElement)
			output = codeElement.innerHTML

			json.main.push({
				snippet: {
					input: {
						lang: {value: 'roole'},
						imports: imports,
						content: content
					},
					output: {
						lang: {value: 'css'},
						content: output
					}
				}
			})
			imports = []

			return
		case 'P':
			var content = element.innerHTML
			var result = /^INFO: ([\s\S]*)/.exec(content)
			if (result) {
				json.main.push({
					info: {
						content: result[1]
					}
				})
				return
			}

			result = /^WARNING: ([\s\S]*)/.exec(content)
			if (result) {
				json.main.push({
					warning: {
						content: result[1]
					}
				})
				return
			}
			// fall through

		default:
			json.main.push({
				element: {
					tag: nodeName.toLowerCase(),
					content: element.innerHTML
				}
			})
			return
		}
	})

	return json
}